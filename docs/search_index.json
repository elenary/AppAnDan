[["index.html", "Прикладной анализ данных 1 Чек-лист работы с данными 1.1 Сформулированы теоретические гипотезы 1.2 Сформулированы экспериментальные гипотезы 1.3 Есть понимание, как будут выглядеть собранные данные 1.4 Исходя из гипотезы и того, как будут собраны и какие это данные, выбран статистический метод проверки экспериментальной гипотезы 1.5 Выбрана среда для анализа данных и конкретная функция под выбранный статистический критерий (или несколько функций) (если нужно - установлен пакет для выбранных функций) 1.6 Собранные данные предобработаны и приведены в вид, к которому можно применить выбранный статистический критерий и выполнить выбранную функцию 1.7 Выбранные для анализа предобработанные переменные исследованы описательными статистиками и предварительно визуализированы для общего понимания) 1.8 Проведен расчет выбранного статистического критерия с помощью выбранной функции 1.9 Вид полученных результатов понятен для интерпретации, и результаты согласуются с представлением о том, как они должны выглядеть 1.10 Результаты проинтепретированы и сделан вывод относительно статистической и экспериментальной гипотез 1.11 Результаты визуализированы, так, чтобы их было легче правильно воспринять", " Прикладной анализ данных Елена Рыбина 2022-04-28 1 Чек-лист работы с данными Рассмотрим, как должен выглядеть чек-лист работы с данными для проверки себя, если бы эти экспериментальные данные мы собирали бы сами? —–Теоретический этап, планирование работы с данными—– Сформулированы теоретические гипотезы. Сформулированы экспериментальные гипотезы. Есть понимание, как будут выглядеть собранные данные. Исходя из гипотезы и того, как будут собраны и какие это данные, выбран статистический метод проверки экспериментальной гипотезы (и хорошо, если есть понимание о статистической гипотезе – это уже про H0 и H1) Выбрана среда для анализа данных и конкретная функция под выбранный статистический критерий (или несколько функций) (если нужно - установлен пакет для выбранных функций). —–Данные собраны—– Собранные данные предобработаны и приведены в вид, к которому можно применить выбранный статистический критерий и выполнить выбранную функцию. Выбранные для анализа предобработанные переменные исследованы описательными статистиками и предварительно визуализированы для общего понимания). Проведен расчет выбранного статистического критерия с помощью выбранной функции. Вид полученных результатов понятен для интерпретации, и результаты согласуются с представлением о том, как они должны выглядеть. Результаты проинтепретированы и сделан вывод относительно статистической и экспериментальной гипотез. Результаты визуализированы, так, чтобы их было легче правильно воспринять. Теперь пройдемся подробнее по некоторым из этих пунктов. В качестве примера возьмем датасет с kaggle https://www.kaggle.com/datasets/uciml/student-alcohol-consumption. Это – данные из двух португальских школ (скорее колледжей) с подробной социо-демографической информации о студентах, включая ту, как они учатся по математике и португальскому языку и как часто пьют алкоголь. Этот датасет я взяла, так как он содержит переменные разного типа данных в разных шкалах (и шкала отношений, например, возраст, и порядковая шкала, например, рейтинггования образования мамы или папы или поддержка в семье). studens_mat &lt;- read_csv(&quot;student-mat.csv&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## .default = col_character(), ## age = col_double(), ## Medu = col_double(), ## Fedu = col_double(), ## traveltime = col_double(), ## studytime = col_double(), ## failures = col_double(), ## famrel = col_double(), ## freetime = col_double(), ## goout = col_double(), ## Dalc = col_double(), ## Walc = col_double(), ## health = col_double(), ## absences = col_double(), ## G1 = col_double(), ## G2 = col_double(), ## G3 = col_double() ## ) ## ℹ Use `spec()` for the full column specifications. studens_mat %&gt;% rename_with(., ~ paste0(., &quot;_mat&quot;), .cols = c(absences, paid, G1, G2, G3)) -&gt; studens_mat #переименовываю колонки для упрощения понимания, какие относятся к математикие # kable(studens_mat[1:10,]) %&gt;% scroll_box(width = &quot;100%&quot;) #визуализирую табличку для этой книжки studens_por &lt;- read_csv(&quot;student-por.csv&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────── ## cols( ## .default = col_character(), ## age = col_double(), ## Medu = col_double(), ## Fedu = col_double(), ## traveltime = col_double(), ## studytime = col_double(), ## failures = col_double(), ## famrel = col_double(), ## freetime = col_double(), ## goout = col_double(), ## Dalc = col_double(), ## Walc = col_double(), ## health = col_double(), ## absences = col_double(), ## G1 = col_double(), ## G2 = col_double(), ## G3 = col_double() ## ) ## ℹ Use `spec()` for the full column specifications. studens_por %&gt;% rename_with(., ~ paste0(., &quot;_por&quot;), .cols = c(absences, paid, G1, G2, G3)) -&gt; studens_por kable(studens_por[1:10,]) %&gt;% scroll_box(width = &quot;100%&quot;) #визуализирую табличку для этой книжки school sex age address famsize Pstatus Medu Fedu Mjob Fjob reason guardian traveltime studytime failures schoolsup famsup paid_por activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences_por G1_por G2_por G3_por GP F 18 U GT3 A 4 4 at_home teacher course mother 2 2 0 yes no no no yes yes no no 4 3 4 1 1 3 4 0 11 11 GP F 17 U GT3 T 1 1 at_home other course father 1 2 0 no yes no no no yes yes no 5 3 3 1 1 3 2 9 11 11 GP F 15 U LE3 T 1 1 at_home other other mother 1 2 0 yes no no no yes yes yes no 4 3 2 2 3 3 6 12 13 12 GP F 15 U GT3 T 4 2 health services home mother 1 3 0 no yes no yes yes yes yes yes 3 2 2 1 1 5 0 14 14 14 GP F 16 U GT3 T 3 3 other other home father 1 2 0 no yes no no yes yes no no 4 3 2 1 2 5 0 11 13 13 GP M 16 U LE3 T 4 3 services other reputation mother 1 2 0 no yes no yes yes yes yes no 5 4 2 1 2 5 6 12 12 13 GP M 16 U LE3 T 2 2 other other home mother 1 2 0 no no no no yes yes yes no 4 4 4 1 1 3 0 13 12 13 GP F 17 U GT3 A 4 4 other teacher home mother 2 2 0 yes yes no no yes yes no no 4 1 4 1 1 1 2 10 13 13 GP M 15 U LE3 A 3 2 services other home mother 1 2 0 no yes no no yes yes yes no 4 2 2 1 1 1 0 15 16 17 GP M 15 U GT3 T 3 4 other other home mother 1 2 0 no yes no yes yes yes yes no 5 5 1 1 1 5 0 12 12 13 1.1 Сформулированы теоретические гипотезы Возьмем первую придуманную гипотезу: в датасете есть студенты возрастов от 15 до 22 двух лет. Возможно, те, кто младше, будут бояться признаться в употрблении алкоголя и отвечать так, будто не употрябляют его. Они вляются несовершеннолетними и могут бояться, что родители узнают. Эта гипотеза хороша тем, что она имеет понятное теоретическое обоснование, она проверяема на наших данных, и данные подходят для того, чтобы ее проверить Вторая гипотеза: студенты с менее поддерживающими отношениями в семье чаще употребляют алкоголь. Эта гипотеза так же понятна, имеет теоретическое обосноование, проверяема в исследовании, и наши данные подходят для ее проверки. 1.2 Сформулированы экспериментальные гипотезы Гипотеза 1 в контексте нашего исследования и существующих переменных звучит так: студенты возраста 15-17 лет при ответе на вопрос об употреблении алкоголя в рабочие дни (переменная Dalc) будут выбирать варианты ответов, ассоциированные с как можно более редким употреблением - 1 или 2 Гипотеза 2 Студенты, кто оценивает отношения с родителями как менее поддерживающие (переменная famrel, значения 1-2), чаще употребляют алкоголь (переменная Dalc, значения 4-5) 1.3 Есть понимание, как будут выглядеть собранные данные Здесь мы работаем с уже готовым датасетом, поэтому понимание о собранных данных у нас есть, и мы уже даже объединили несколько табличек в одну - students. 1.4 Исходя из гипотезы и того, как будут собраны и какие это данные, выбран статистический метод проверки экспериментальной гипотезы В нашем случае все не совсем так, и мы пытаемся прикрутить гипотезу к уже собранным данным – никогда так не делайте (или делайте, но хорошо подумайте, уверены ли вы в том, что делаете?) 1.5 Выбрана среда для анализа данных и конкретная функция под выбранный статистический критерий (или несколько функций) (если нужно - установлен пакет для выбранных функций) Как вы уже догадались, я обрабатываю данные в R. 1.6 Собранные данные предобработаны и приведены в вид, к которому можно применить выбранный статистический критерий и выполнить выбранную функцию Ура, наконец-то мы на этапе, где уже собраны данные! Я немного предобработаю их, чтобы дальше было проще с ними работать. Не недооценивайте предобработку: опытные аналитики говорят, что примерно 80%-90% анализа данных составляет предобработка, и только оставшиеся – собственно выполнение ключевой функции и получение целевой цифры. studens_mat %&gt;% full_join(studens_por, by = c(&quot;school&quot;,&quot;sex&quot;,&quot;age&quot;,&quot;address&quot;,&quot;famsize&quot;,&quot;Pstatus&quot;,&quot;Medu&quot;,&quot;Fedu&quot;, &quot;Mjob&quot;,&quot;Fjob&quot;,&quot;reason&quot;, &quot;guardian&quot;, &quot;traveltime&quot;,&quot;studytime&quot;, &quot;failures&quot;, &quot;schoolsup&quot;, &quot;famsup&quot;, &quot;activities&quot;, &quot;nursery&quot;, &quot;higher&quot;, &quot;internet&quot;, &quot;romantic&quot;, &quot;famrel&quot;, &quot;freetime&quot;, &quot;goout&quot;, &quot;Dalc&quot;, &quot;Walc&quot;, &quot;health&quot;)) -&gt; students #объединяю две таблички в одну students %&gt;% mutate(&quot;student&quot; = paste0(&quot;id&quot;, row_number()), .before = &quot;school&quot;) -&gt; students #добавляю колонку с айдишником и перезаписываю результат в датасет students %&gt;% drop_na() -&gt; students #пропускаю строки с NA и перезаписываю результат в датасет students %&gt;% mutate(G_mat = rowMeans(select(., c(G1_mat, G2_mat, G3_mat))), G_por = rowMeans(select(., c(G1_por, G2_por, G3_por)))) -&gt; students kable(students[1:10,]) %&gt;% scroll_box(width = &quot;100%&quot;) student school sex age address famsize Pstatus Medu Fedu Mjob Fjob reason guardian traveltime studytime failures schoolsup famsup paid_mat activities nursery higher internet romantic famrel freetime goout Dalc Walc health absences_mat G1_mat G2_mat G3_mat paid_por absences_por G1_por G2_por G3_por G_mat G_por id1 GP F 18 U GT3 A 4 4 at_home teacher course mother 2 2 0 yes no no no yes yes no no 4 3 4 1 1 3 6 5 6 6 no 4 0 11 11 5.666667 7.333333 id2 GP F 17 U GT3 T 1 1 at_home other course father 1 2 0 no yes no no no yes yes no 5 3 3 1 1 3 4 5 5 6 no 2 9 11 11 5.333333 10.333333 id4 GP F 15 U GT3 T 4 2 health services home mother 1 3 0 no yes yes yes yes yes yes yes 3 2 2 1 1 5 2 15 14 15 no 0 14 14 14 14.666667 14.000000 id5 GP F 16 U GT3 T 3 3 other other home father 1 2 0 no yes yes no yes yes no no 4 3 2 1 2 5 4 6 10 10 no 0 11 13 13 8.666667 12.333333 id6 GP M 16 U LE3 T 4 3 services other reputation mother 1 2 0 no yes yes yes yes yes yes no 5 4 2 1 2 5 10 15 15 15 no 6 12 12 13 15.000000 12.333333 id7 GP M 16 U LE3 T 2 2 other other home mother 1 2 0 no no no no yes yes yes no 4 4 4 1 1 3 0 12 12 11 no 0 13 12 13 11.666667 12.666667 id8 GP F 17 U GT3 A 4 4 other teacher home mother 2 2 0 yes yes no no yes yes no no 4 1 4 1 1 1 6 6 5 6 no 2 10 13 13 5.666667 12.000000 id9 GP M 15 U LE3 A 3 2 services other home mother 1 2 0 no yes yes no yes yes yes no 4 2 2 1 1 1 0 16 18 19 no 0 15 16 17 17.666667 16.000000 id10 GP M 15 U GT3 T 3 4 other other home mother 1 2 0 no yes yes yes yes yes yes no 5 5 1 1 1 5 0 14 15 15 no 0 12 12 13 14.666667 12.333333 id11 GP F 15 U GT3 T 4 4 teacher health reputation mother 1 2 0 no yes yes no yes yes yes no 3 3 3 1 2 2 0 10 8 9 no 2 14 14 14 9.000000 14.000000 1.7 Выбранные для анализа предобработанные переменные исследованы описательными статистиками и предварительно визуализированы для общего понимания) Теперь давайте поизучаем данные. Как ведут себя выбранные для анализа переменные? Что это за данные: в какой шкале они записаны, непрерывные или дискретные? Каковы максимальные и миниамальные значения? А самые встречающиеся? Какова вообще встречаемость разных значений? Такое описание данных называется описательными статистиками (descipritve stats), потому что, как уже понятно, описывает наши данные. Это идет в разрез со статистиками вывода (inferential stats), когда мы делаем выводы относительно гипотез – сравнение двух выборов, определение предикторов в линейной регрессии и так далее. Рассмотрим описательные статистики подробнее. 1.7.1 Описательные статистики Переменные, которые нас интересовали – для одной гипотезы это возраст (Age) и употребление алкоголя на выходных (Walc), для другой – отношения в семье (famrel) и употребление алкоголя в рабочие дни (Dalc). Рассмотрим их подробнее. summary(students$age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 15.00 16.00 16.00 16.52 17.00 22.00 Более детальный способ – с помощью дополнительных пакетов, например, Skimr и функции skim skimr::skim(students$age) Table 1.1: Data summary Name students$age Number of rows 320 Number of columns 1 _______________________ Column type frequency: numeric 1 ________________________ Group variables None Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist data 0 1 16.52 1.14 15 16 16 17 22 ▇▅▃▁▁ skimr::skim(students) Table 1.1: Data summary Name students Number of rows 320 Number of columns 41 _______________________ Column type frequency: character 19 numeric 22 ________________________ Group variables None Variable type: character skim_variable n_missing complete_rate min max empty n_unique whitespace student 0 1 3 5 0 320 0 school 0 1 2 2 0 2 0 sex 0 1 1 1 0 2 0 address 0 1 1 1 0 2 0 famsize 0 1 3 3 0 2 0 Pstatus 0 1 1 1 0 2 0 Mjob 0 1 5 8 0 5 0 Fjob 0 1 5 8 0 5 0 reason 0 1 4 10 0 4 0 guardian 0 1 5 6 0 3 0 schoolsup 0 1 2 3 0 2 0 famsup 0 1 2 3 0 2 0 paid_mat 0 1 2 3 0 2 0 activities 0 1 2 3 0 2 0 nursery 0 1 2 3 0 2 0 higher 0 1 2 3 0 2 0 internet 0 1 2 3 0 2 0 romantic 0 1 2 3 0 2 0 paid_por 0 1 2 3 0 2 0 Variable type: numeric skim_variable n_missing complete_rate mean sd p0 p25 p50 p75 p100 hist age 0 1 16.52 1.14 15 16 16.00 17.00 22.00 ▇▅▃▁▁ Medu 0 1 2.87 1.07 0 2 3.00 4.00 4.00 ▁▂▆▅▇ Fedu 0 1 2.62 1.09 0 2 3.00 4.00 4.00 ▁▅▇▇▇ traveltime 0 1 1.43 0.69 1 1 1.00 2.00 4.00 ▇▃▁▁▁ studytime 0 1 2.08 0.87 1 1 2.00 3.00 4.00 ▅▇▁▃▁ failures 0 1 0.08 0.39 0 0 0.00 0.00 3.00 ▇▁▁▁▁ famrel 0 1 3.99 0.89 1 4 4.00 5.00 5.00 ▁▁▂▇▅ freetime 0 1 3.20 0.97 1 3 3.00 4.00 5.00 ▁▃▇▆▂ goout 0 1 3.07 1.10 1 2 3.00 4.00 5.00 ▂▆▇▅▃ Dalc 0 1 1.44 0.88 1 1 1.00 2.00 5.00 ▇▂▁▁▁ Walc 0 1 2.22 1.26 1 1 2.00 3.00 5.00 ▇▅▃▂▁ health 0 1 3.52 1.42 1 3 4.00 5.00 5.00 ▃▂▅▃▇ absences_mat 0 1 5.41 7.84 0 0 4.00 7.25 75.00 ▇▁▁▁▁ G1_mat 0 1 11.29 3.20 5 9 11.00 14.00 19.00 ▃▇▇▅▂ G2_mat 0 1 11.18 3.67 0 9 11.00 14.00 19.00 ▁▂▇▇▂ G3_mat 0 1 11.04 4.30 0 9 11.00 14.00 20.00 ▁▃▇▆▂ absences_por 0 1 3.25 4.56 0 0 2.00 4.00 32.00 ▇▁▁▁▁ G1_por 0 1 12.39 2.56 0 11 12.00 14.00 19.00 ▁▁▅▇▂ G2_por 0 1 12.57 2.42 5 11 12.00 14.00 19.00 ▁▃▇▅▁ G3_por 0 1 12.88 2.89 0 11 13.00 15.00 19.00 ▁▁▅▇▃ G_mat 0 1 11.17 3.56 2 9 11.00 13.67 19.33 ▁▃▇▅▂ G_por 0 1 12.62 2.51 4 11 12.67 14.33 18.67 ▁▂▇▆▂ 1.7.2 Таблицы и пропорции table(students$age, students$Walc) ## ## 1 2 3 4 5 ## 15 43 11 10 5 2 ## 16 37 20 12 14 8 ## 17 24 20 24 12 7 ## 18 23 18 13 8 2 ## 19 1 2 3 0 0 ## 22 0 0 0 0 1 round(prop.table(table(students$age, students$Walc), 1), 2) ## ## 1 2 3 4 5 ## 15 0.61 0.15 0.14 0.07 0.03 ## 16 0.41 0.22 0.13 0.15 0.09 ## 17 0.28 0.23 0.28 0.14 0.08 ## 18 0.36 0.28 0.20 0.12 0.03 ## 19 0.17 0.33 0.50 0.00 0.00 ## 22 0.00 0.00 0.00 0.00 1.00 1.7.3 Описательные визуализации Какой график построить для исследования данных внутри одной переменной? Гистограмма Если переменная количественная и дискретная или строковая – гистограмму (частота встречаемости отдельных значений). hist(students$Walc) students %&gt;% ggplot(aes(x=Walc)) + geom_histogram(binwidth = 0.5) + theme_minimal() Другой вариант визуализации гистограммы – с помощью барплота. Барплоты students %&gt;% ggplot(aes(x=Walc)) + geom_bar(aes(fill = as.factor(Walc)), stat = &#39;count&#39;) + theme_minimal() График плотности вероятности Если переменная количественная, и данные непрерывны – график плотности (вероятности). В нашем датасете на количественную непрерывную переменную больше всего похожи пропуски занятий students %&gt;% ggplot(aes(x=absences_por)) + geom_density() + theme_minimal() students %&gt;% ggplot(aes(x=G_por)) + geom_density() + theme_minimal() 1.7.4 Визуализации статистического вывода, которые тоже помогают понять данные Хорошо, посмотрели, как ведут себя данные в наших целевых переменных: что из себя представляют, каков характер распредедения. А что, если нам интересно посмотреть переменные не по одной, а в зависимости друг от друга? Если взять две переменные, по осям x и y? Такие графики мы обычно строим, когда нужно визуализироовать результаты какого-либо статистического тестирования: сравнения двух средних, поиска корреляции и т.д. Поэтому я назвала этот пункт “визуализациями статистического вывода”. Однако, сами статистические тесты сейчас я не провожу, но мне интересно взглянуть на данные, как они ведут себя уже не сами по себе, а в соответствии с выдвинутыми гипотезами? Диаграмма рассеяния students %&gt;% ggplot(aes(x=G_mat, y = absences_mat)) + geom_point(aes(colour = absences_mat)) + theme_minimal() Коррелограмма Допустим, мы хотим посмотреть корреляцию всех количественных переменных соо всеми (никогда так не делайте – вы обязательно найдетете какую-нибудь связь, возможно из-за статистической ошибки и несмотря на то, что не искали эту связь, и соблазн выдать ее за свою гипотезу будет слишком велик). students %&gt;% select(traveltime, studytime, famrel, freetime, Dalc, Walc, health, absences_mat, absences_por, G_mat, G_por) %&gt;% as.matrix() -&gt; students_numeric_matrix students_numeric_matrix %&gt;% cor() %&gt;% round(2) ## traveltime studytime famrel freetime Dalc Walc health ## traveltime 1.00 -0.10 -0.03 -0.06 0.16 0.11 0.02 ## studytime -0.10 1.00 0.00 -0.09 -0.17 -0.23 -0.04 ## famrel -0.03 0.00 1.00 0.09 -0.06 -0.13 0.14 ## freetime -0.06 -0.09 0.09 1.00 0.20 0.12 0.07 ## Dalc 0.16 -0.17 -0.06 0.20 1.00 0.65 0.06 ## Walc 0.11 -0.23 -0.13 0.12 0.65 1.00 0.07 ## health 0.02 -0.04 0.14 0.07 0.06 0.07 1.00 ## absences_mat 0.00 -0.08 -0.05 -0.05 0.15 0.21 0.01 ## absences_por 0.05 -0.13 -0.03 -0.01 0.11 0.15 0.00 ## G_mat -0.16 0.09 -0.05 -0.02 -0.07 -0.06 -0.06 ## G_por -0.18 0.24 -0.03 -0.10 -0.27 -0.18 -0.16 ## absences_mat absences_por G_mat G_por ## traveltime 0.00 0.05 -0.16 -0.18 ## studytime -0.08 -0.13 0.09 0.24 ## famrel -0.05 -0.03 -0.05 -0.03 ## freetime -0.05 -0.01 -0.02 -0.10 ## Dalc 0.15 0.11 -0.07 -0.27 ## Walc 0.21 0.15 -0.06 -0.18 ## health 0.01 0.00 -0.06 -0.16 ## absences_mat 1.00 0.56 -0.06 -0.13 ## absences_por 0.56 1.00 -0.12 -0.10 ## G_mat -0.06 -0.12 1.00 0.59 ## G_por -0.13 -0.10 0.59 1.00 Или более красивый и понятный вариант с помощью пакета Hmisc library(&quot;Hmisc&quot;) ## Loading required package: lattice ## Loading required package: survival ## Loading required package: Formula ## ## Attaching package: &#39;Hmisc&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## src, summarize ## The following objects are masked from &#39;package:base&#39;: ## ## format.pval, units students_numeric_matrix %&gt;% rcorr() ## traveltime studytime famrel freetime Dalc Walc health ## traveltime 1.00 -0.10 -0.03 -0.06 0.16 0.11 0.02 ## studytime -0.10 1.00 0.00 -0.09 -0.17 -0.23 -0.04 ## famrel -0.03 0.00 1.00 0.09 -0.06 -0.13 0.14 ## freetime -0.06 -0.09 0.09 1.00 0.20 0.12 0.07 ## Dalc 0.16 -0.17 -0.06 0.20 1.00 0.65 0.06 ## Walc 0.11 -0.23 -0.13 0.12 0.65 1.00 0.07 ## health 0.02 -0.04 0.14 0.07 0.06 0.07 1.00 ## absences_mat 0.00 -0.08 -0.05 -0.05 0.15 0.21 0.01 ## absences_por 0.05 -0.13 -0.03 -0.01 0.11 0.15 0.00 ## G_mat -0.16 0.09 -0.05 -0.02 -0.07 -0.06 -0.06 ## G_por -0.18 0.24 -0.03 -0.10 -0.27 -0.18 -0.16 ## absences_mat absences_por G_mat G_por ## traveltime 0.00 0.05 -0.16 -0.18 ## studytime -0.08 -0.13 0.09 0.24 ## famrel -0.05 -0.03 -0.05 -0.03 ## freetime -0.05 -0.01 -0.02 -0.10 ## Dalc 0.15 0.11 -0.07 -0.27 ## Walc 0.21 0.15 -0.06 -0.18 ## health 0.01 0.00 -0.06 -0.16 ## absences_mat 1.00 0.56 -0.06 -0.13 ## absences_por 0.56 1.00 -0.12 -0.10 ## G_mat -0.06 -0.12 1.00 0.59 ## G_por -0.13 -0.10 0.59 1.00 ## ## n= 320 ## ## ## P ## traveltime studytime famrel freetime Dalc Walc health ## traveltime 0.0651 0.6269 0.3188 0.0038 0.0597 0.7100 ## studytime 0.0651 0.9804 0.1011 0.0020 0.0000 0.4651 ## famrel 0.6269 0.9804 0.1044 0.3062 0.0238 0.0124 ## freetime 0.3188 0.1011 0.1044 0.0002 0.0333 0.2061 ## Dalc 0.0038 0.0020 0.3062 0.0002 0.0000 0.2849 ## Walc 0.0597 0.0000 0.0238 0.0333 0.0000 0.2088 ## health 0.7100 0.4651 0.0124 0.2061 0.2849 0.2088 ## absences_mat 0.9792 0.1414 0.3914 0.4091 0.0066 0.0002 0.8290 ## absences_por 0.3328 0.0157 0.5984 0.8386 0.0546 0.0070 0.9847 ## G_mat 0.0050 0.1221 0.3352 0.7490 0.2238 0.3051 0.2539 ## G_por 0.0014 0.0000 0.5365 0.0745 0.0000 0.0010 0.0040 ## absences_mat absences_por G_mat G_por ## traveltime 0.9792 0.3328 0.0050 0.0014 ## studytime 0.1414 0.0157 0.1221 0.0000 ## famrel 0.3914 0.5984 0.3352 0.5365 ## freetime 0.4091 0.8386 0.7490 0.0745 ## Dalc 0.0066 0.0546 0.2238 0.0000 ## Walc 0.0002 0.0070 0.3051 0.0010 ## health 0.8290 0.9847 0.2539 0.0040 ## absences_mat 0.0000 0.2991 0.0195 ## absences_por 0.0000 0.0369 0.0740 ## G_mat 0.2991 0.0369 0.0000 ## G_por 0.0195 0.0740 0.0000 Визуализируем матрицу корреляций в коррелограмму library(corrplot) ## corrplot 0.90 loaded corrplot(cor(students_numeric_matrix), method=&quot;circle&quot;) # corrplot(rcorr(students_numeric_matrix)$r, p.mat = rcorr(students_numeric_matrix)$P, sig.level = 0.05, insig = &quot;blank&quot;) heatmap(x = cor(students_numeric_matrix)) Боксплот и вайолин плот Если нам интересно посмотреть значения в группах, можно построить боксплот (тот самый ящик с усами) students %&gt;% ggplot(aes(x=Walc, y = age)) + geom_boxplot(aes(fill = as.factor(Walc))) + theme_minimal() Или даже лучше и информативнее – вайолин плот (повернутое на бок распределение плотности вероятности, зачастую вместе с ящиком с усами.) students %&gt;% ggplot(aes(x=Walc, y = age)) + geom_violin(aes(fill = as.factor(Walc))) + theme_minimal() Визуализация линейной регрессии students %&gt;% ggplot(aes(x=G_mat, y = absences_mat)) + geom_point(aes(colour = absences_mat)) + geom_smooth(method=&quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; theme_minimal() ## List of 93 ## $ line :List of 6 ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 0.5 ## ..$ linetype : num 1 ## ..$ lineend : chr &quot;butt&quot; ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ rect :List of 5 ## ..$ fill : chr &quot;white&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 0.5 ## ..$ linetype : num 1 ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_rect&quot; &quot;element&quot; ## $ text :List of 11 ## ..$ family : chr &quot;&quot; ## ..$ face : chr &quot;plain&quot; ## ..$ colour : chr &quot;black&quot; ## ..$ size : num 11 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : num 0 ## ..$ lineheight : num 0.9 ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ title : NULL ## $ aspect.ratio : NULL ## $ axis.title : NULL ## $ axis.title.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.75points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.75points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.x.bottom : NULL ## $ axis.title.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.75points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.title.y.left : NULL ## $ axis.title.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.75points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey30&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 2.2points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.top :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : num 0 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 2.2points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.x.bottom : NULL ## $ axis.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 1 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 2.2points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.text.y.left : NULL ## $ axis.text.y.right :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 0points 2.2points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ axis.ticks : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ axis.ticks.x : NULL ## $ axis.ticks.x.top : NULL ## $ axis.ticks.x.bottom : NULL ## $ axis.ticks.y : NULL ## $ axis.ticks.y.left : NULL ## $ axis.ticks.y.right : NULL ## $ axis.ticks.length : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ axis.ticks.length.x : NULL ## $ axis.ticks.length.x.top : NULL ## $ axis.ticks.length.x.bottom: NULL ## $ axis.ticks.length.y : NULL ## $ axis.ticks.length.y.left : NULL ## $ axis.ticks.length.y.right : NULL ## $ axis.line : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ axis.line.x : NULL ## $ axis.line.x.top : NULL ## $ axis.line.x.bottom : NULL ## $ axis.line.y : NULL ## $ axis.line.y.left : NULL ## $ axis.line.y.right : NULL ## $ legend.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ legend.spacing.x : NULL ## $ legend.spacing.y : NULL ## $ legend.key : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.key.size : &#39;simpleUnit&#39; num 1.2lines ## ..- attr(*, &quot;unit&quot;)= int 3 ## $ legend.key.height : NULL ## $ legend.key.width : NULL ## $ legend.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.text.align : NULL ## $ legend.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ legend.title.align : NULL ## $ legend.position : chr &quot;right&quot; ## $ legend.direction : NULL ## $ legend.justification : chr &quot;center&quot; ## $ legend.box : NULL ## $ legend.box.just : NULL ## $ legend.box.margin : &#39;margin&#39; num [1:4] 0cm 0cm 0cm 0cm ## ..- attr(*, &quot;unit&quot;)= int 1 ## $ legend.box.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ legend.box.spacing : &#39;simpleUnit&#39; num 11points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ panel.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ panel.border : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ panel.spacing : &#39;simpleUnit&#39; num 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ panel.spacing.x : NULL ## $ panel.spacing.y : NULL ## $ panel.grid :List of 6 ## ..$ colour : chr &quot;grey92&quot; ## ..$ size : NULL ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ panel.grid.major : NULL ## $ panel.grid.minor :List of 6 ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.5 ## ..$ linetype : NULL ## ..$ lineend : NULL ## ..$ arrow : logi FALSE ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_line&quot; &quot;element&quot; ## $ panel.grid.major.x : NULL ## $ panel.grid.major.y : NULL ## $ panel.grid.minor.x : NULL ## $ panel.grid.minor.y : NULL ## $ panel.ontop : logi FALSE ## $ plot.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ plot.title :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 1.2 ## ..$ hjust : num 0 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 5.5points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.title.position : chr &quot;panel&quot; ## $ plot.subtitle :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : num 0 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 0points 0points 5.5points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.caption :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : num 1 ## ..$ vjust : num 1 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 5.5points 0points 0points 0points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.caption.position : chr &quot;panel&quot; ## $ plot.tag :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : &#39;rel&#39; num 1.2 ## ..$ hjust : num 0.5 ## ..$ vjust : num 0.5 ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ plot.tag.position : chr &quot;topleft&quot; ## $ plot.margin : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.background : list() ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_blank&quot; &quot;element&quot; ## $ strip.background.x : NULL ## $ strip.background.y : NULL ## $ strip.placement : chr &quot;inside&quot; ## $ strip.text :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : chr &quot;grey10&quot; ## ..$ size : &#39;rel&#39; num 0.8 ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : NULL ## ..$ lineheight : NULL ## ..$ margin : &#39;margin&#39; num [1:4] 4.4points 4.4points 4.4points 4.4points ## .. ..- attr(*, &quot;unit&quot;)= int 8 ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ strip.text.x : NULL ## $ strip.text.y :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : num -90 ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## $ strip.switch.pad.grid : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.switch.pad.wrap : &#39;simpleUnit&#39; num 2.75points ## ..- attr(*, &quot;unit&quot;)= int 8 ## $ strip.text.y.left :List of 11 ## ..$ family : NULL ## ..$ face : NULL ## ..$ colour : NULL ## ..$ size : NULL ## ..$ hjust : NULL ## ..$ vjust : NULL ## ..$ angle : num 90 ## ..$ lineheight : NULL ## ..$ margin : NULL ## ..$ debug : NULL ## ..$ inherit.blank: logi TRUE ## ..- attr(*, &quot;class&quot;)= chr [1:2] &quot;element_text&quot; &quot;element&quot; ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;theme&quot; &quot;gg&quot; ## - attr(*, &quot;complete&quot;)= logi TRUE ## - attr(*, &quot;validate&quot;)= logi TRUE Визуализация лоогистической регрессии 1.7.5 Визуализации в R с помощью ggplot2 Грамматика графиков (The Crammar of Graphics) Большую часть этих графиков я визуализировала с помощью пакета ggplot2. Пару слов о том, как он работает. https://ggplot2.tidyverse.org/ По сути, это – универсальный конструктор графиков. Мы подгружаем данные, а дальше, послойно, собираем на них график как конструктор, накладывая каждый слой на предыдущий. В парадигме грамматики графиков любой график состоит из нескольких слоев: первый слой – данные, передаем их чаще всего первой строчкой с объявлением функции ggplot() geom (геометрический объект), обычно второй строчкой: geom_hist, geom_bar, geom_point, geom_line aes (эстетики) - аргумент geom или ggplot – оси x и y, цвета (для обводки и точек цвет задает через color, для заливки и объектов, имеющих плозадь – через fill). Пишут внутри aes() в скобках внутри геома или ggplot. Задавая аргументы-эстетики как бы натягиваем наши данные на координатную ось и геометрический объект, задаем правила преообразования данных в график. Это были обязательные слои построения графиков. Есть еще вспомогательные, которые доступны не для всех геомов: stat (статистические трансформации) - используется в основном для превращения барплота в гистограмму (stat=“count”) facets - позволяет отобразить график в фасетах themes - настраивает визуальные темы (вне зависимости от данных и геома: цвет фона графика, прозрачность подложки, толщина и цвет координатной сетки и т.д.) 1.8 Проведен расчет выбранного статистического критерия с помощью выбранной функции Тут появится информация к занятию после майских 1.9 Вид полученных результатов понятен для интерпретации, и результаты согласуются с представлением о том, как они должны выглядеть 1.10 Результаты проинтепретированы и сделан вывод относительно статистической и экспериментальной гипотез 1.11 Результаты визуализированы, так, чтобы их было легче правильно воспринять Несмотря на то, что визуализация результатов стоит последний пунктом, это очень важный этап. Кроме того, он может использоваться и до получения результатов, чтобы прикинуть, какими получатся результаты еще до проведения статистического теста 1.11.1 Визуализации данных в системах для построения дашбордов https://www.tableau.com/ https://www.tableau.com/data-insights/dashboard-showcase https://www.datawrapper.de/ "]]
